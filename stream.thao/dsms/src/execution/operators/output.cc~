#ifndef _OUTPUT_
#include "execution/operators/output.h"
#endif

#ifndef _DEBUG_
#include "common/debug.h"
#endif

//added by Thao
#include <string.h>
#include <stdlib.h>
#include <memory.h>
#include <math.h>
//end of added by Thao

/// debug
#include <iostream>
using namespace std;

using namespace Execution;

#define UNLOCK_INPUT_TUPLE(t) (inStore -> decrRef ((t)))

Output::Output(unsigned int _id, std::ostream& _LOG)
	: LOG (_LOG)
{
	id              = _id;
	inputQueue      = 0;
	inStore         = 0;
	numAttrs        = 0;
	output          = 0;
#ifdef _DM_
	lastInputTs     = 0;

	//HR implementation by Lory Al Moakar
	//initialize operator type and statistics 
	
	this -> operator_type = OUTPUT;
	this -> mean_cost = 1;
	this -> mean_selectivity = 1;
	this -> local_selectivity =1;
	this -> n_tuples_outputted = 0;
	this -> local_cost = 1;
	// we want output operators to have a high priority 
	// because we want to drain tuples fast from the 
	// system
	this -> priority = 10; 
	this -> num_tuples_processed = 0;

	this -> steady_state = false;
	this -> n_full_queue = 0;
	//end of part 1 of HR implementation by LAM
	
	//load manager , by Thao Pham
	sum_response_time = 0;
	avg_response_time = 0;
		
	std_response_time =0; //assumed to be equal to processing time
	
	num_tuples_rt =0;
	
	this->snapshot_local_cost_per_tuple = 0;
	
	//ctrl-based load shedding
#ifdef _CTRL_LOAD_MANAGE_	
	ctrl_out_tuple_count =0;
	ctrl_num_of_queuing_tuples = 0;	
#endif	
	//end of part 1 of load manager, by Thao Pham

#endif
}

Output::~Output() {}

int Output::setInputQueue (Queue *inputQueue)
{
	ASSERT (inputQueue);
	
	this -> inputQueue = inputQueue;
	return 0;
}

int Output::setInStore (StorageAlloc *store)
{
	ASSERT (store);

	this -> inStore = store;
	return 0;
}

int Output::setQueryOutput (Interface::QueryOutput *output)
{
	ASSERT (output);

	this -> output = output;
	return 0;
}

int Output::addAttr (Type type, unsigned int len, Column inCol)
{
	if (numAttrs == MAX_ATTRS)
		return -1;
	
	attrs [numAttrs].type = type;
	attrs [numAttrs].len = len;	
	inCols [numAttrs] = inCol;
	
	numAttrs ++;
	return 0;
}

int Output::initialize()
{
	int rc;
	
	ASSERT (output);
	ASSERT (numAttrs);
	
	if ((rc = output -> setNumAttrs (numAttrs)) != 0)
		return rc;
	
	for (unsigned int a = 0 ; a < numAttrs ; a++) {
		if ((rc = output -> setAttrInfo (a, attrs[a].type, attrs[a].len))
			!= 0)
			return rc;
	}
	
	if ((rc = output -> start()) != 0)
		return rc;
	
	// compute the offsets of the attributes
	unsigned int offset = DATA_OFFSET;
	for (unsigned int a = 0 ; a < numAttrs ; a++) {
		offsets [a] = offset;
		
		switch (attrs [a].type) {
		case INT:   offset += INT_SIZE;      break;
		case FLOAT: offset += FLOAT_SIZE;    break;
		case BYTE:  offset += BYTE_SIZE;     break;
		case CHAR:  offset += attrs [a].len; break;
		default:
			return -1;
		}
	}	
	tupleLen = offset;
	
	return 0;
}

//end of load manager, by Thao Pham		

int Output::run (TimeSlice timeSlice)
{
	int rc;
	Element inputElement;
	Tuple inputTuple;
	unsigned int numElements;	
	char effect;

#ifdef _MONITOR_
	startTimer ();
#endif

/*#ifdef _CTRL_LOAD_MANAGE_
	ctrl_out_tuple_count = 0;
#endif
*/	
	numElements = timeSlice;
	unsigned int e=0;
	
	//local stats computation, by Thao Pham
	Monitor::Timer mytime;
	unsigned long long int timeBeforeLoop = mytime.getTime();
	int n_before = num_tuples_processed;
	//end of part 1 of local stats computation, by Thao Pham
	
	//HR implementation by Lory Al Moakar
	if ( inputQueue ->isFull() ) {
	  ++n_full_queue;
	  //printf("Size is %d \n",inputQueue->size());
	}
	// end of part 1 of HR implementation by LAM
	
	for (;e < numElements ; e++) {
		
		// Get the next element
		if (!inputQueue -> dequeue (inputElement))
			break;
				
		//local cost  computation, by Thao Pham (selectivity of output is always 1)
		// find out the num_tuples_processed so far
		num_tuples_processed += 1;
		// end of part 2 of local cost computation, by Thao Pham
				
		ASSERT (lastInputTs <= inputElement.timestamp);
		
#ifdef _DM_
		lastInputTs = inputElement.timestamp;
#endif
		
		// Ignore heartbeats
		if (inputElement.kind == E_HEARTBEAT)
			continue;
	
#ifdef _CTRL_LOAD_MANAGE_
			ctrl_num_of_queuing_tuples -=1;

#endif //_CTRL_LOAD_MANAGE		

		inputTuple = inputElement.tuple;
		
		// Output timestamp
		memcpy(buffer, &inputElement.timestamp, TIMESTAMP_SIZE);
				
		// Output effect: integer 1 for PLUS, integer 2 for MINUS
		effect = (inputElement.kind == E_PLUS)? '+' : '-';		
		memcpy(buffer + EFFECT_OFFSET, &effect, 1);
		
		// Output the remaining attributes
		for (unsigned int a = 0 ; a < numAttrs ; a++) {
			switch (attrs[a].type) {
			case INT:							
				memcpy (buffer + offsets[a],
						&(ICOL(inputTuple, inCols [a])),
						INT_SIZE);
				break;
				
			case FLOAT:
				memcpy (buffer + offsets[a],
						&(FCOL(inputTuple, inCols [a])),
						FLOAT_SIZE);
				break;
				
			case BYTE:
				buffer [offsets[a]] = BCOL(inputTuple,
							   inCols[a]);
				break;
				
			case CHAR:
				
				strncpy (buffer + offsets [a],
						 (CCOL(inputTuple, inCols [a])),
						 attrs [a].len);
				
				break;
				
			default:
				return -1;
			}
			
		}
		
		UNLOCK_INPUT_TUPLE(inputTuple);
		
		// Response Time Calculation By Lory Al Moakar
		//get the current time
		Monitor::Timer mytime;
		unsigned long long int curTime = mytime.getTime(); 
		
		//calculate time elapsed
		curTime = curTime - this -> system_start_time;
		
		//calculate time elapsed in time units (in nano sec?)
		unsigned long long int time_elapsed = curTime - 
		  ((unsigned long long int)inputElement.timestamp *  (unsigned long long int)time_unit);
		//printf("%lld, %lld \n", curTime, inputElement.timestamp*1000);
		
		// Output the tuple
		if ((rc = output -> putNext (buffer, tupleLen,
					     time_elapsed, time_unit )) != 0)
			return rc;
		//end of part 1 of response time calculation by LAM
		
		//response time monitor, by Thao Pham
		
		
		num_tuples_rt += 1;
		sum_response_time += time_elapsed;
		
		//end of part 2 of response time monitor, by Thao Pham
		
//control-based load manager, by Thao Pham
#ifdef _CTRL_LOAD_MANAGE_
		ctrl_out_tuple_count ++;
	
#endif

//end of control-based load manager, by Thao Pham
	}

#ifdef _MONITOR_
	stopTimer ();
	
#endif

	//local cost computation, by Thao Pham
	//get current time	
	unsigned long long int timeAfterLoop = mytime.getTime();
	
	//calculate time elapsed during execution
	//add it to local cost
	if ( num_tuples_processed > n_before )//e >= 1  
	  local_cost += timeAfterLoop - timeBeforeLoop;

	//end of part 3 of cost computation by Thao Pham
	
	return 0;
}
//HR implementation by Lory Al Moakar
/**
 * This method is used in order to calculate the local 
 * selectivity and the local cost per tuple of this operator
 * @return bool true or false
 * true when the statistics have changed and false otherwise
 */ 
bool Output::calculateLocalStats(){ 

//implementation added by Thao Pham

// no tuples were processed in the last round
  // --> no need to adjust costs and selectivity
  if ( num_tuples_processed == 0) {
    return false;
  }
  //calculate local cost
  //selectivity is always 1, as initialized 
  if (!firstRefresh) { 
  	
    double old_local_cost = local_cost_per_tuple;
    double current_avg = (double) local_cost / (double) num_tuples_processed;

    local_cost_per_tuple = (1-ALPHA) * local_cost_per_tuple +
      ALPHA * current_avg; // /time_unit;
     
    k_measurements += 1;
    
    M_k = M_k_1 + ( current_avg - M_k_1)/k_measurements;
    S_k += ( current_avg - M_k_1 ) * ( current_avg - M_k );
    M_k_1 = M_k;
    
    avg_k = (1-ALPHA) * avg_k +  ALPHA * current_avg; 
    
    stdev = sqrt ( S_k / ( k_measurements -1 ) ) ;
    
    if ( (current_avg - avg_k) > OULIER_FACTOR*stdev) {
      //      printf("SELECT OUTLIER current %f  new avg %f old avg %f \n", current_avg, local_cost_per_tuple,
      //     old_local_cost);
      local_cost_per_tuple  = old_local_cost;
      
    }
    
    //printf ( "SELECTION OPERATOR %d costs %llu  n_tuples %d smoothed %f \n",
    //     operator_id, local_cost, num_tuples_processed,local_cost_per_tuple);
  }
  else {
    
    local_cost_per_tuple = (double) local_cost / (double) num_tuples_processed; // /time_unit;
    M_k = local_cost_per_tuple;
    avg_k = local_cost_per_tuple;
    M_k_1 = M_k;
    S_k = 0;
    k_measurements = 1;
    //printf ( "OPERATOR %d costs %llu  n_tuples %d\n",
    //	     operator_id, local_cost, num_tuples_processed);
  }
  
  firstRefresh = false;
//end of the implementation added by Thao Pham
//load manager, by Thao Pham
  snapshot_local_cost_per_tuple = (double) local_cost / (double) num_tuples_processed;
  //end of load manager, by Thao Pham 
return true; 

}

/** this method is used in order to calculate the priority
 * of the operator. This is used in order to assign the priorities
 * used by the scheduler to schedule operators.
 */

void Output::refreshPriority(){}
// end of part 1 of HR implementation by LAM

//HR with ready by Lory Al Moakar 
/** this method returns how ready this operator is to 
 * execute. If it returns a positive number --> ready
 * If it returns a zero or negative number --> not ready
 */
int Output::readyToExecute() {
  return inputQueue->size();
}

// end of part 1 of HR with ready by LAM

//average response time and response time moving trend monitor, by Thao Pham

/*compute response time based on statistics collects during the previous period
* and reset the response time calculation cycle */
bool Output::computeAvgResponseTime()
{	
	if(num_tuples_rt==0) return false;//nothing change since the last period
	
	double old_avg_rt = avg_response_time;
	avg_response_time = sum_response_time/num_tuples_rt;
	
	//debug only
	//printf("\n num tuples outputted: %d", num_tuples_rt);
	
	if(std_response_time>0)
	{
		if(avg_response_time < std_response_time ) //std response time is the smallest response time possible
			std_response_time = avg_response_time;
	}
	else 
		std_response_time = avg_response_time;
	
	//reset calculation cycle
	sum_response_time = 0;
	num_tuples_rt =0; 

	return true;
}
		
/*check if accummulated delay observed?*/
bool Output::isAbnormalResponseTimeObserved()
{
	if(std_response_time ==0) return false;
	
	if(avg_response_time>= (CONTROL_DELAY_TARGET + query_class_id*100000000))
		return true;
	
	else
		return false;     
}

bool Output::isCriticallyAbnormalResponseTimeObserved(double factor)
{
	if(std_response_time ==0) return false;
	
	if(avg_response_time> (1+factor)*(CONTROL_DELAY_TARGET + query_class_id*100000000))//(delay_tolerance+0.2)*std_response_time)
		return true;
	
	else
		return false;
}

bool Output::isAccummulatedDelayObserved(double systemCapacityExpandingFactor)
{
	if(std_response_time ==0) return false;
	//printf("%f\n", systemCapacityExpandingFactor);
	//if(avg_response_time> std_response_time + std_response_time/systemCapacityExpandingFactor)
	if(avg_response_time> std_response_time*systemCapacityExpandingFactor)
		return true;
	
	else
		return false;   
	
}

bool Output::isSignificantlyBelowTargetObserved(double factor)
{
	if(std_response_time ==0) return false;
	//printf("%f\n", systemCapacityExpandingFactor);
	//if(avg_response_time> std_response_time + std_response_time/systemCapacityExpandingFactor)
	if(avg_response_time < (1-factor)* (CONTROL_DELAY_TARGET + query_class_id*100000000))
		return true;
	
	else
		return false;   
}
//end of avg response time monitoring, by Thao Pham

