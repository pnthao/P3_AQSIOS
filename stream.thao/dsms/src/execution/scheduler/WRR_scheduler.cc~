/**
 * @file       round_robin.cc
 * @date       June 4, 2004
 * @brief      Implementation of the round robin scheduler
 */

/// debug
#include <math.h>
#include <iostream>
using namespace std;

#ifndef _DEBUG_
#include "common/debug.h"
#endif

#ifndef _WRR_SCHEDULER_
#include "execution/scheduler/WRR_scheduler.h"
#endif

using namespace Execution;

static const TimeSlice timeSlice = 1000;//50;//100;
//load managing, by Thao Pham
static const int loadManagingCycle = 10; 
//end of load managing, by Thao Pham 

WRR_Scheduler::WRR_Scheduler()
{
	//load manager, by Thao Pham
  	this->num_loadMgrs = 0;
  	//loadMgrs = new LoadManager* [MAX_QUERY_CLASSES];
    //end of load manager, by Thao Pham
  	//initialize the number of query classes.
  	n_query_classes = 1;
  	// initialize quota_default to 100
 	quota_default = 100;
 	
 	for ( int i = 0; i < n_query_classes; i++ ) {
       quota.push_back( quota_default );
  }
 	
	this -> numOps = 0;	
	bStop = false;
	// Response Time Calculation By Lory Al Moakar
	//initialize time_unit to 1 if not specified by user
	// or not using server impl to start the system
	time_unit = 1;
	//end of part 1 of response time calculation by LAM
	
	//load managing, by Thao Pham
	ctrl_last_ts = 0;
	//end of load managing, by Thao Pham
	
	 //load management, by Thao Pham
  	count_loadManagementCycle = 0;
  	//end of load management, by Thao Pham
}
WRR_Scheduler::WRR_Scheduler(int n_classes)
{
	//load manager, by Thao Pham
  	this->num_loadMgrs = 0;
  	//loadMgrs = new LoadManager* [MAX_QUERY_CLASSES];
    //end of load manager, by Thao Pham
  	//initialize the number of query classes.
  	n_query_classes = n_classes;
  	
  	// initialize quota_default to 100
 	 quota_default = 100;
 	 
 	 	
 	for ( int i = 0; i < n_query_classes; i++ ) {
       quota.push_back( quota_default );
  	}
  
	this -> numOps = 0;	
	bStop = false;
	// Response Time Calculation By Lory Al Moakar
	//initialize time_unit to 1 if not specified by user
	// or not using server impl to start the system
	time_unit = 1;
	//end of part 1 of response time calculation by LAM
	
	//load managing, by Thao Pham
	ctrl_last_ts = 0;
	//end of load managing, by Thao Pham
	
	 //load management, by Thao Pham
 	 count_loadManagementCycle = 0;
 	 //end of load management, by Thao Pham
}
WRR_Scheduler::~WRR_Scheduler() {}

int WRR_Scheduler::addOperator (Operator *op)
{
	if (numOps == MAX_OPS)
		return -1;	
	ops [numOps ++] = op;
	
	return 0;
}

int WRR_Scheduler::run (long long int numTimeUnits)
{
	
	int rc;
	int numofCycles = 0;
	// Response Time Calculation By Lory Al Moakar
	// get the time when the system starts execution
	Monitor::Timer mytime;
	this -> startingTime = mytime.getTime(); 

	//initialize the system_start_time in each of the operators
	for (unsigned int o = 0 ; o < numOps ; o++) {
	  ops [o] -> system_start_time = this -> startingTime;
	  ops [o] -> time_unit = this -> time_unit;
	}
	
	//synergy with load_managing, by Thao Pham
 	 //keep an original copy of the priorities
  	for(int i=0;i<n_query_classes;i++)
  		original_query_class_priorities[i] = query_class_priorities[i];
  	
  //end of part 1 of synergy with load managing by Thao Pham
	 //calculate total_priorities
  	double total_priorities = 0;
  	for ( int i = 0; i < n_query_classes; i++ ) 
    total_priorities +=  query_class_priorities[i];
  	if ( !(total_priorities > 0) ) 
    fprintf( stderr, "total priorities is %f", total_priorities ) ;	
	//end of part 2 of response time calculation by LAM

	// numtimeunits == 0 signal for scheduler to run forever (until stopped)
	if (numTimeUnits == 0) {		
		while (!bStop) {
			
			
	 //re-calculating the quota (in number of tuples) for each class
		    for ( int i = 0; i < n_query_classes; i++ ) {
				//rc = scheds[i] -> run(quota[i]);
				quota[i] = ceil( quota_default * query_class_priorities[i] / total_priorities ); 
			}
	  
	  		for (unsigned int o = 0 ; o < numOps ; o++) {
				if ((rc = ops [o] -> run(quota[ops[o]->query_class_id])) != 0) {
					return rc;
				}
			}
#ifdef _LOAD_MANAGE_

				Monitor::Timer ctrlTimer;
					
				long long unsigned int ctrl_now = ctrlTimer.getTime();
				if(ctrl_last_ts ==0)
					ctrl_last_ts = ctrl_now;
				
				//if(numofCycles==loadManagingCycle)
				if(ctrl_now - ctrl_last_ts >= 0.9*CONTROL_PERIOD )
				{
				
 					// count_loadManagementCycle ++;
 				
					for(int k = 0; k<num_loadMgrs; k++)
					{
						//printf("load manager: %d\n", loadMgr->load_manager_type);
						switch(loadMgrs[k]->load_manager_type)
						{
							case 0: break;						
							case 1: //ALM
									if((loadMgrs[k]->run(true, 10))<0)
									return rc; 
									//numofCycles = 0;
									ctrl_last_ts = ctrl_now;
									break;
									
							case 2: //CTRL
									if((loadMgrs[k]->runCtrlLoadMgr())<0)
									return rc; 
									//numofCycles = 0;
									ctrl_last_ts = ctrl_now;
									break;
									
							case 3: //HCTRL
									if((loadMgrs[k]->runDynamicCtrlLoadMgr())<0)
									return rc; 
									//numofCycles = 0;
									ctrl_last_ts = ctrl_now;
									break;
									
							case 4: //extCTRL
									if((loadMgrs[k]->runExtendedCtrlLoadMgr())<0)
									return rc; 
									//numofCycles = 0;
									ctrl_last_ts = ctrl_now;
									break;
									
							case 5: //extHCTRL
									if((loadMgrs[k]->runExtendedDynamicCtrlLoadMgr())<0)
									return rc; 
									//numofCycles = 0;
									ctrl_last_ts = ctrl_now;
									break;
							case 6: //extBaseline
									if((loadMgrs[k]->runExtendedBaselineCtrlLoadMgr())<0)
									return rc; 
									//numofCycles = 0;
									ctrl_last_ts = ctrl_now;
									break;
							case 7: //baseline1 -- with long-term avg cost
									if((loadMgrs[k]->runBaselineLoadMgr1())<0)
									return rc; 
									//numofCycles = 0;
									ctrl_last_ts = ctrl_now;
									break;
									
							case 8: //baseline1 -- with long-term avg cost
									if((loadMgrs[k]->runBaselineLoadMgr2())<0)
									return rc; 
									//numofCycles = 0;
									ctrl_last_ts = ctrl_now;
									break;
						}
					}
					/*if(count_loadManagementCycle == SCHED_ADJUSTMENT_CYCLE)
					{
						ResourceBalancing();
						count_loadManagementCycle = 0;
					}*/
				}
				
#endif //def _LOAD_MANAGE
			    //numofCycles++;
			  	
				//end of load managing, by Thao Pham
				    //numofCycles++;
				  	
					//end of load managing, by Thao Pham
		
		}
		
	}
	
	else {		
	  // Response Time Calculation By Lory Al Moakar
	  //for (long long int t = 0 ; (t < numTimeUnits) && !bStop ; t++) {
	  //get the current time
	  Monitor::Timer mytime;
	  unsigned long long int curTime = mytime.getTime();
	  curTime = this->startingTime;
	  
	  do {
			
		     //re-calculating the quota (in number of tuples) for each class
		    for ( int i = 0; i < n_query_classes; i++ ) {
			 
				//rc = scheds[i] -> run(quota[i]);
				quota[i] = (int)ceil( (quota_default * query_class_priorities[i])/ total_priorities ); 
				//printf("\n%d we are here\n", (int)ceil( (quota_default * query_class_priorities[i])/ total_priorities ));
			}
	  		
	  		for (unsigned int o = 0 ; o < numOps ; o++) {
				if ((rc = ops [o] -> run(quota[ops[o]->query_class_id])) != 0) {
					return rc;
				}

		    }
			
			#ifdef _LOAD_MANAGE_

				Monitor::Timer ctrlTimer;
					
				long long unsigned int ctrl_now = ctrlTimer.getTime();
				if(ctrl_last_ts ==0)
					ctrl_last_ts = ctrl_now;
				
				//if(numofCycles==loadManagingCycle)
				if(ctrl_now - ctrl_last_ts >= 0.9*CONTROL_PERIOD )
				{
					//count_loadManagementCycle ++;
					for(int k = 0; k<num_loadMgrs; k++)
					{
						//printf("load manager: %d\n", loadMgr->load_manager_type);
						switch(loadMgrs[k]->load_manager_type)
						{
							case 0: break;						
							case 1: //ALM
									if((loadMgrs[k]->run(true, 10))<0)
									return rc; 
									//numofCycles = 0;
									ctrl_last_ts = ctrl_now;
									break;
									
							case 2: //CTRL
									if((loadMgrs[k]->runCtrlLoadMgr())<0)
									return rc; 
									//numofCycles = 0;
									ctrl_last_ts = ctrl_now;
									break;
									
							case 3: //HCTRL
									if((loadMgrs[k]->runDynamicCtrlLoadMgr())<0)
									return rc; 
									//numofCycles = 0;
									ctrl_last_ts = ctrl_now;
									break;
									
							case 4: //extCTRL
									if((loadMgrs[k]->runExtendedCtrlLoadMgr())<0)
									return rc; 
									//numofCycles = 0;
									ctrl_last_ts = ctrl_now;
									break;
									
							case 5: //extHCTRL
									if((loadMgrs[k]->runExtendedDynamicCtrlLoadMgr())<0)
									return rc; 
									//numofCycles = 0;
									ctrl_last_ts = ctrl_now;
									break;
							case 6: //extBaseline
									if((loadMgrs[k]->runExtendedBaselineCtrlLoadMgr())<0)
									return rc; 
									//numofCycles = 0;
									ctrl_last_ts = ctrl_now;
									break;
							case 7: //baseline1 -- with long-term avg cost
									if((loadMgrs[k]->runBaselineLoadMgr1())<0)
									return rc; 
									//numofCycles = 0;
									ctrl_last_ts = ctrl_now;
									break;
									
							case 8: //baseline1 -- with long-term avg cost
									if((loadMgrs[k]->runBaselineLoadMgr2())<0)
									return rc; 
									//numofCycles = 0;
									ctrl_last_ts = ctrl_now;
									break;
						}
					}
					/*if(count_loadManagementCycle == SCHED_ADJUSTMENT_CYCLE)
					{
						ResourceBalancing();
						count_loadManagementCycle = 0;
					}*/
				}
				
#endif //def _LOAD_MANAGE
				    //numofCycles++;
				  	
					//end of load managing, by Thao Pham			
		    curTime = mytime.getTime();
		    curTime -= this->startingTime;
		    curTime = curTime/time_unit;
		    
		    
		     
	  } while (!bStop && curTime < numTimeUnits); 
	  //end of part 3 of response time calculation by LAM
	}
#ifdef _CTRL_LOAD_MANAGE_
loadMgrs[0]->incoming_tuples_monitor();
#endif	
	
	return 0;
}



int WRR_Scheduler::stop ()
{
	bStop = true;
	return 0;
}

int WRR_Scheduler::resume ()
{
	bStop = false;
	return 0;
}
